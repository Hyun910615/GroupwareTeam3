<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="note">

	<!-- 첨부파일 없는 쪽지쓰기 -->
	<insert id="sendNote" parameterType="com.team3.groupware.jeongchi.model.MessageVO" useGeneratedKeys="true" keyProperty="message_num">
		insert into message(message_important, message_receiver, message_receiver2, 
		message_title, message_sender, message_sender2, message_contents, message_datetime, 
		message_read, message_type, message_delete_check, emp_num)
		values
		(#{message_important}, #{message_receiver}, #{message_receiver2}, #{message_title}, #{message_sender}, #{message_sender2}, 
		#{message_contents}, now(), 0, #{message_type}, 0, #{emp_num});
   </insert>

	<!-- 해당 부서 사원리스트 불러오기 -->
	<select id="findList" parameterType="HashMap" resultType="com.team3.groupware.common.model.EmployeeVO">
		select emp_name, position_grade, dept_name, emp_num, E.dept_code as dept_code
		from employee E left join department D 
		on E.dept_code = D.dept_code
		<if test="dept_code != null">
			where E.dept_code = #{dept_code} <!-- 부서와 jsp 해당 클래스의 value 값 비교 -->
			and E.auth_code = "normal"
		</if>
		order by emp_num desc;
	</select>
	<!-- 검색하여 사원리스트 불러오기 -->
	<select id="addFindList" resultType="com.team3.groupware.common.model.EmployeeVO">
		select emp_name, position_grade, dept_name, emp_num, E.dept_code as dept_code
		from employee E left join department D  
		on E.dept_code = D.dept_code
		where 
		<choose>
			<when test="search_option == 'all' " >
				(emp_name like CONCAT('%', #{keyword},'%') or
				emp_num like CONCAT('%', #{keyword},'%') or
				dept_name like CONCAT('%', #{keyword},'%'))
			</when>
			<when test="search_option == 'emp_name' " >
				emp_name like CONCAT('%', #{keyword},'%')
			</when>
			<when test="search_option == 'emp_num' ">
				emp_num like CONCAT('%', #{keyword},'%')
			</when>
			<otherwise>		
				emp_num
			</otherwise>
		</choose>
		and E.auth_code = "normal"
		order by emp_num desc;
	</select>
	
	<!-- 보낸 쪽지함 시작 -->
	<!-- 보낸 쪽지함 전체 리스트 불러오기 -->
	<!-- 단순 불러오기	
	<select id="sendMessageList" resultType="com.team3.groupware.jeongchi.model.MessageVO">
		select message_receiver2, message_receiver, message_title, message_datetime,
		message_read, message_type
		from message
		order by message_datetime desc;
	</select>  -->
	<select id="count" resultType="int">
		select count(*) from message;
	</select>
	<!-- 페이징처리용 불러오기 -->
	<select id="sendMessageList" parameterType="hashMap" resultType="com.team3.groupware.jeongchi.model.MessageVO">
		<include refid="paging_header" />
		select message_num, message_receiver2, message_receiver, message_title, message_datetime,
		message_read, message_type
		from message
		where message_sender2 = #{emp_num}
		and message_type = "일반"
		order by message_datetime desc, message_receiver2 desc
		<include refid="paging_footer" />
	</select>
	<!-- 보낸 쪽지함 끝 -->

	<!-- 받은 쪽지함 시작 -->
	<!-- 페이징처리용 불러오기 -->
	<select id="receiveMessageList" parameterType="hashMap" resultType="com.team3.groupware.jeongchi.model.MessageVO">
		<include refid="paging_header" />
		select message_num, message_sender2, message_sender, message_title, message_datetime,
		message_read, message_type
		from message 
		where message_receiver2 = #{emp_num}
		and message_type = "일반"
		order by message_datetime desc, message_sender2 desc
		<include refid="paging_footer" />
	</select>
	
	<!-- 중요 쪽지함 시작 -->
	<!-- 페이징처리용 불러오기 -->
	<select id="importantMessageList" parameterType="hashMap" resultType="com.team3.groupware.jeongchi.model.MessageVO">
		<include refid="paging_header" />
		select message_num, message_sender2, message_sender, message_title, message_datetime,
		message_read, message_type
		from message 
		where message_receiver2 = #{emp_num}
		and message_important = 1
		order by message_datetime desc, message_sender2 desc
		<include refid="paging_footer" />
	</select>
	
	<!-- 임시보관함 시작 -->
	<!-- 페이징처리용 불러오기 -->
	<select id="tempMessageList" parameterType="hashMap" resultType="com.team3.groupware.jeongchi.model.MessageVO">
		<include refid="paging_header" />
		select message_num, message_sender2, message_sender, message_title, message_datetime,
		message_read, message_type
		from message 
		where message_sender2 = #{emp_num}
		and message_type = "임시"
		order by message_datetime desc, message_sender2 desc
		<include refid="paging_footer" />
	</select>
	
	<!-- 디테일 페이지 불러오기 -->
	<select id="message_detail" parameterType="hashMap" resultType="hashMap">
		select message_num, message_title, message_sender, message_receiver, message_datetime, message_contents 
		from message
		where message_num = #{message_num};
	</select>

	<sql id="paging_header"> <!-- 메인 쿼리 헤더 -->
		select *
		from(
		select @ROWNUM:=@ROWNUM+1 as rn, A.*
		from(
	</sql>

	<sql id="paging_footer"> <!-- 메인 쿼리 푸터 -->
		) A
		where (@ROWNUM:=0)=0) rn
		where rn between #{start} and #{end}
	</sql>
	
</mapper>

